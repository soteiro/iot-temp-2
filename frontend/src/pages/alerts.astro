---
import AppLayout from "@/layouts/AppLayout.astro";

// Simulación de datos de alertas
const alerts = [
  {
    id: 1,
    type: 'critical',
    title: 'Temperatura extrema detectada',
    message: 'Sensor 2 registra 35°C, excediendo el límite crítico de 30°C',
    sensor: 'Sensor 2',
    location: 'Cocina',
    timestamp: Date.now() - 15 * 60 * 1000, // 15 min atrás
    value: '35°C',
    threshold: '30°C',
    status: 'active',
    acknowledged: false
  },
  {
    id: 2,
    type: 'warning',
    title: 'Sensor desconectado',
    message: 'Sensor 4 no responde desde hace 45 minutos',
    sensor: 'Sensor 4',
    location: 'Baño',
    timestamp: Date.now() - 45 * 60 * 1000, // 45 min atrás
    value: 'Sin señal',
    threshold: '5 min timeout',
    status: 'active',
    acknowledged: false
  },
  {
    id: 3,
    type: 'info',
    title: 'Mantenimiento programado',
    message: 'Sensor 1 será reiniciado para actualización de firmware',
    sensor: 'Sensor 1',
    location: 'Sala Principal',
    timestamp: Date.now() - 2 * 60 * 60 * 1000, // 2h atrás
    value: 'Programado',
    threshold: 'N/A',
    status: 'scheduled',
    acknowledged: true
  },
  {
    id: 4,
    type: 'critical',
    title: 'Humedad crítica',
    message: 'Sensor 3 detecta humedad del 85%, riesgo de condensación',
    sensor: 'Sensor 3',
    location: 'Dormitorio',
    timestamp: Date.now() - 3 * 60 * 60 * 1000, // 3h atrás
    value: '85%',
    threshold: '70%',
    status: 'resolved',
    acknowledged: true
  },
  {
    id: 5,
    type: 'warning',
    title: 'Variación anómala',
    message: 'Sensor 5 muestra fluctuaciones inusuales de temperatura',
    sensor: 'Sensor 5',
    location: 'Oficina',
    timestamp: Date.now() - 4 * 60 * 60 * 1000, // 4h atrás
    value: '±5°C/min',
    threshold: '±2°C/min',
    status: 'active',
    acknowledged: false
  },
  {
    id: 6,
    type: 'info',
    title: 'Calibración completada',
    message: 'Sensor 1 ha sido calibrado exitosamente',
    sensor: 'Sensor 1',
    location: 'Sala Principal',
    timestamp: Date.now() - 6 * 60 * 60 * 1000, // 6h atrás
    value: 'Completado',
    threshold: 'N/A',
    status: 'resolved',
    acknowledged: true
  }
];

// Función para formatear tiempo relativo
const getRelativeTime = (timestamp: number) => {
  const now = Date.now();
  const diff = now - timestamp;
  const minutes = Math.floor(diff / (1000 * 60));
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  
  if (days > 0) return `hace ${days} día${days > 1 ? 's' : ''}`;
  if (hours > 0) return `hace ${hours} hora${hours > 1 ? 's' : ''}`;
  if (minutes > 0) return `hace ${minutes} minuto${minutes > 1 ? 's' : ''}`;
  return 'ahora mismo';
};

// Estadísticas de alertas
const alertStats = {
  total: alerts.length,
  active: alerts.filter(a => a.status === 'active').length,
  critical: alerts.filter(a => a.type === 'critical' && a.status === 'active').length,
  unacknowledged: alerts.filter(a => !a.acknowledged).length
};
---

<AppLayout title="Alertas">
  <div class="min-h-screen bg-base-200 p-4">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center gap-3 mb-2">
        <div class="w-10 h-10 bg-error rounded-lg flex items-center justify-center">
          <svg class="w-6 h-6 text-error-content" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"/>
          </svg>
        </div>
        <div>
          <h1 class="text-3xl font-bold text-base-content">Sistema de Alertas</h1>
          <p class="text-base-content/70">Monitoreo y gestión de alertas del sistema IoT</p>
        </div>
      </div>
      <div class="text-sm breadcrumbs">
        <ul>
          <li><a href="/" class="text-primary">Inicio</a></li>
          <li><a href="/dashboard" class="text-primary">Dashboard</a></li>
          <li class="text-base-content">Alertas</li>
        </ul>
      </div>
    </div>

    <!-- Alert Stats -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <!-- Total Alertas -->
      <div class="stat bg-base-100 shadow-lg rounded-2xl border border-base-300">
        <div class="stat-figure text-primary">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12v5H4l5-5z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12V7h5l-5-5v5z"/>
          </svg>
        </div>
        <div class="stat-title">Total de Alertas</div>
        <div class="stat-value text-primary">{alertStats.total}</div>
        <div class="stat-desc">Últimas 24 horas</div>
      </div>

      <!-- Alertas Activas -->
      <div class="stat bg-base-100 shadow-lg rounded-2xl border border-base-300">
        <div class="stat-figure text-warning">
          <div class="w-8 h-8 bg-warning rounded-full flex items-center justify-center">
            <span class="text-warning-content font-bold text-sm">{alertStats.active}</span>
          </div>
        </div>
        <div class="stat-title">Alertas Activas</div>
        <div class="stat-value text-warning">{alertStats.active}</div>
        <div class="stat-desc">Requieren atención</div>
      </div>

      <!-- Críticas -->
      <div class="stat bg-base-100 shadow-lg rounded-2xl border border-base-300">
        <div class="stat-figure text-error">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
        </div>
        <div class="stat-title">Críticas Activas</div>
        <div class="stat-value text-error">{alertStats.critical}</div>
        <div class="stat-desc">Acción inmediata</div>
      </div>

      <!-- Sin Reconocer -->
      <div class="stat bg-base-100 shadow-lg rounded-2xl border border-base-300">
        <div class="stat-figure text-accent">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
          </svg>
        </div>
        <div class="stat-title">Sin Reconocer</div>
        <div class="stat-value text-accent">{alertStats.unacknowledged}</div>
        <div class="stat-desc">Pendientes</div>
      </div>
    </div>

    <!-- Filters and Actions -->
    <div class="flex flex-col md:flex-row gap-4 mb-6">
      <!-- Filters -->
      <div class="flex-1">
        <div class="card bg-base-100 shadow-lg border border-base-300">
          <div class="card-body p-4">
            <div class="flex flex-wrap gap-4 items-center">
              <!-- Type Filter -->
              <div class="form-control">
                <label class="label">
                  <span class="label-text text-sm">Tipo</span>
                </label>
                <select class="select select-bordered select-sm w-full max-w-xs">
                  <option selected>Todos</option>
                  <option>Críticas</option>
                  <option>Advertencias</option>
                  <option>Información</option>
                </select>
              </div>

              <!-- Status Filter -->
              <div class="form-control">
                <label class="label">
                  <span class="label-text text-sm">Estado</span>
                </label>
                <select class="select select-bordered select-sm w-full max-w-xs">
                  <option selected>Todos</option>
                  <option>Activas</option>
                  <option>Resueltas</option>
                  <option>Programadas</option>
                </select>
              </div>

              <!-- Sensor Filter -->
              <div class="form-control">
                <label class="label">
                  <span class="label-text text-sm">Sensor</span>
                </label>
                <select class="select select-bordered select-sm w-full max-w-xs">
                  <option selected>Todos</option>
                  <option>Sensor 1</option>
                  <option>Sensor 2</option>
                  <option>Sensor 3</option>
                  <option>Sensor 4</option>
                  <option>Sensor 5</option>
                </select>
              </div>

              <!-- Search -->
              <div class="form-control flex-1 min-w-64">
                <label class="label">
                  <span class="label-text text-sm">Buscar</span>
                </label>
                <div class="input-group">
                  <input type="text" placeholder="Buscar alertas..." class="input input-bordered input-sm flex-1">
                  <button class="btn btn-square btn-sm">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Bulk Actions -->
      <div class="flex gap-2">
        <button class="btn btn-primary btn-sm">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
          </svg>
          Reconocer Todas
        </button>
        <button class="btn btn-outline btn-sm">
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
          </svg>
          Exportar
        </button>
      </div>
    </div>

    <!-- Alerts List -->
    <div class="space-y-4">
      {alerts.map((alert: {
        id: number;
        type: 'critical' | 'warning' | 'info';
        title: string;
        message: string;
        sensor: string;
        location: string;
        timestamp: number;
        value: string;
        threshold: string;
        status: 'active' | 'resolved' | 'scheduled';
        acknowledged: boolean;
      }) => {
        const alertTypeClasses = {
          critical: 'border-l-error bg-error/5',
          warning: 'border-l-warning bg-warning/5',
          info: 'border-l-info bg-info/5'
        };
        
        const statusClasses = {
          active: 'badge-error',
          resolved: 'badge-success',
          scheduled: 'badge-info'
        };

        const iconClasses = {
          critical: 'text-error',
          warning: 'text-warning',
          info: 'text-info'
        };

        return (
          <div class={`card bg-base-100 shadow-lg border-l-4 ${alertTypeClasses[alert.type]} border border-base-300`}>
            <div class="card-body p-6">
              <div class="flex items-start justify-between gap-4">
                <!-- Alert Content -->
                <div class="flex-1">
                  <div class="flex items-center gap-3 mb-3">
                    <!-- Alert Icon -->
                    <div class={`flex-shrink-0 ${iconClasses[alert.type]}`}>
                      {alert.type === 'critical' && (
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"/>
                        </svg>
                      )}
                      {alert.type === 'warning' && (
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                      )}
                      {alert.type === 'info' && (
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                      )}
                    </div>

                    <!-- Alert Info -->
                    <div class="flex-1 min-w-0">
                      <div class="flex items-center gap-2 mb-1">
                        <h3 class="font-semibold text-base-content truncate">{alert.title}</h3>
                        <div class={`badge badge-sm ${statusClasses[alert.status]}`}>
                          {alert.status === 'active' && 'Activa'}
                          {alert.status === 'resolved' && 'Resuelta'}
                          {alert.status === 'scheduled' && 'Programada'}
                        </div>
                        {!alert.acknowledged && (
                          <div class="badge badge-accent badge-sm">Sin reconocer</div>
                        )}
                      </div>
                      <p class="text-sm text-base-content/70 mb-2">{alert.message}</p>
                      <div class="flex flex-wrap gap-4 text-xs text-base-content/60">
                        <span class="flex items-center gap-1">
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                          </svg>
                          {alert.location}
                        </span>
                        <span class="flex items-center gap-1">
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                          </svg>
                          {getRelativeTime(alert.timestamp)}
                        </span>
                        <span class="flex items-center gap-1">
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
                          </svg>
                          {alert.sensor}
                        </span>
                      </div>
                    </div>
                  </div>

                  <!-- Alert Details -->
                  <div class="bg-base-200 rounded-lg p-3 mt-3">
                    <div class="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span class="font-medium text-base-content/70">Valor actual:</span>
                        <span class="ml-2 font-semibold">{alert.value}</span>
                      </div>
                      <div>
                        <span class="font-medium text-base-content/70">Umbral:</span>
                        <span class="ml-2 font-semibold">{alert.threshold}</span>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Actions -->
                <div class="flex flex-col gap-2 flex-shrink-0">
                  {!alert.acknowledged && (
                    <button class="btn btn-primary btn-sm">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                      </svg>
                      Reconocer
                    </button>
                  )}
                  {alert.status === 'active' && (
                    <button class="btn btn-success btn-sm">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                      </svg>
                      Resolver
                    </button>
                  )}
                  <div class="dropdown dropdown-end">
                    <div tabindex="0" role="button" class="btn btn-ghost btn-sm btn-square">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"/>
                      </svg>
                    </div>
                    <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                      <li><a>Ver detalles</a></li>
                      <li><a>Editar umbral</a></li>
                      <li><a>Silenciar por 1h</a></li>
                      <li><a>Crear ticket</a></li>
                      <li><a class="text-error">Eliminar</a></li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
      })}
    </div>

    <!-- Pagination -->
    <div class="flex justify-center mt-8">
      <div class="join">
        <button class="join-item btn btn-outline">«</button>
        <button class="join-item btn btn-outline">Página 1</button>
        <button class="join-item btn btn-outline btn-active">2</button>
        <button class="join-item btn btn-outline">3</button>
        <button class="join-item btn btn-outline">»</button>
      </div>
    </div>

    <!-- Quick Actions Panel -->
    <div class="fixed bottom-6 right-6 z-50">
      <div class="dropdown dropdown-top dropdown-end">
        <div tabindex="0" role="button" class="btn btn-circle btn-primary btn-lg shadow-lg">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
          </svg>
        </div>
        <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52 mb-2">
          <li>
            <a class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"/>
              </svg>
              Nueva alerta manual
            </a>
          </li>
          <li>
            <a class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
              </svg>
              Configurar reglas
            </a>
          </li>
          <li>
            <a class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12v5H4l5-5z"/>
              </svg>
              Ver historial
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
</AppLayout>

<script>
  // Auto-refresh alerts every 30 seconds
  let autoRefresh = true;
  
  function refreshAlerts() {
    if (autoRefresh) {
      // Here you would fetch new alerts from your API
      console.log('Refreshing alerts...');
    }
  }
  
  // Start auto-refresh
  const refreshInterval = setInterval(refreshAlerts, 30000);
  
  // Handle visibility change to pause/resume refresh
  document.addEventListener('visibilitychange', function() {
    autoRefresh = !document.hidden;
  });
  
  // Cleanup on page unload
  window.addEventListener('beforeunload', function() {
    clearInterval(refreshInterval);
  });
</script>
