---
import AppLayout from "@/layouts/AppLayout.astro";
import AnalyticsChart from "@/components/AnalyticsChart.tsx";

// Simular datos de diferentes períodos
const generateTempData = (hours: number, interval: number) => {
  const data = [];
  const now = Date.now();
  
  for (let i = hours; i >= 0; i -= interval) {
    const time = now - (i * 60 * 60 * 1000);
    const baseTemp = 22;
    const variation = Math.sin((i / hours) * Math.PI * 4) * 5;
    const noise = (Math.random() - 0.5) * 2;
    const temperature = baseTemp + variation + noise;
    const humidity = 45 + Math.sin((i / hours) * Math.PI * 3) * 15 + (Math.random() - 0.5) * 5;
    
    data.push({
      time,
      temperature: Math.round(temperature * 10) / 10,
      humidity: Math.round(humidity * 10) / 10,
      sensor: `sensor${Math.floor(Math.random() * 3) + 1}`
    });
  }
  
  return data.reverse();
};

// Datos para diferentes períodos
const dayData = generateTempData(24, 1); // Últimas 24h, cada hora
const weekData = generateTempData(168, 6); // Última semana, cada 6h
const monthData = generateTempData(720, 24); // Último mes, cada día

// Calcular estadísticas
const calculateStats = (data: any[]) => {
  const temps = data.map(d => d.temperature);
  const humidities = data.map(d => d.humidity || 0);
  
  return {
    avgTemp: temps.reduce((a, b) => a + b, 0) / temps.length,
    maxTemp: Math.max(...temps),
    minTemp: Math.min(...temps),
    avgHumidity: humidities.reduce((a, b) => a + b, 0) / humidities.length,
    maxHumidity: Math.max(...humidities),
    minHumidity: Math.min(...humidities),
    tempVariation: Math.max(...temps) - Math.min(...temps),
    dataPoints: data.length
  };
};

const dayStats = calculateStats(dayData);
const weekStats = calculateStats(weekData);
const monthStats = calculateStats(monthData);

// Datos de sensores individuales
const sensorData = [
  { name: 'Sensor 1', location: 'Sala Principal', avgTemp: 23.2, status: 'normal', uptime: 99.8 },
  { name: 'Sensor 2', location: 'Cocina', avgTemp: 26.8, status: 'warning', uptime: 97.5 },
  { name: 'Sensor 3', location: 'Dormitorio', avgTemp: 20.1, status: 'normal', uptime: 99.9 },
  { name: 'Sensor 4', location: 'Baño', avgTemp: 24.5, status: 'offline', uptime: 0 },
  { name: 'Sensor 5', location: 'Oficina', avgTemp: 22.7, status: 'normal', uptime: 98.2 },
];
---

<AppLayout title="Analytics">
  <div class="min-h-screen bg-base-200 p-4">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center gap-3 mb-2">
        <div class="w-10 h-10 bg-secondary rounded-lg flex items-center justify-center">
          <svg class="w-6 h-6 text-secondary-content" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
          </svg>
        </div>
        <div>
          <h1 class="text-3xl font-bold text-base-content">Analytics</h1>
          <p class="text-base-content/70">Análisis detallado de datos de sensores IoT</p>
        </div>
      </div>
      <div class="text-sm breadcrumbs">
        <ul>
          <li><a href="/" class="text-primary">Inicio</a></li>
          <li><a href="/dashboard" class="text-primary">Dashboard</a></li>
          <li class="text-base-content">Analytics</li>
        </ul>
      </div>
    </div>

    <!-- Time Range Selector -->
    <div class="mb-6">
      <div class="tabs tabs-boxed bg-base-100 shadow-lg w-fit">
        <a class="tab tab-active" data-period="day">24 Horas</a>
        <a class="tab" data-period="week">7 Días</a>
        <a class="tab" data-period="month">30 Días</a>
      </div>
    </div>

    <!-- Stats Overview -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      <!-- Temperatura Promedio -->
      <div class="stat bg-base-100 shadow-lg rounded-2xl border border-base-300">
        <div class="stat-figure text-primary">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2z"/>
          </svg>
        </div>
        <div class="stat-title">Promedio (24h)</div>
        <div class="stat-value text-primary">{dayStats.avgTemp.toFixed(1)}°C</div>
        <div class="stat-desc">
          <span class="text-success">↗︎ 2.1°C</span> vs semana anterior
        </div>
      </div>

      <!-- Variación -->
      <div class="stat bg-base-100 shadow-lg rounded-2xl border border-base-300">
        <div class="stat-figure text-warning">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"/>
          </svg>
        </div>
        <div class="stat-title">Variación Térmica</div>
        <div class="stat-value text-warning">{dayStats.tempVariation.toFixed(1)}°C</div>
        <div class="stat-desc">Rango diario actual</div>
      </div>

      <!-- Humedad Promedio -->
      <div class="stat bg-base-100 shadow-lg rounded-2xl border border-base-300">
        <div class="stat-figure text-info">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z"/>
          </svg>
        </div>
        <div class="stat-title">Humedad Promedio</div>
        <div class="stat-value text-info">{dayStats.avgHumidity.toFixed(1)}%</div>
        <div class="stat-desc">Dentro del rango óptimo</div>
      </div>

      <!-- Puntos de Datos -->
      <div class="stat bg-base-100 shadow-lg rounded-2xl border border-base-300">
        <div class="stat-figure text-accent">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
          </svg>
        </div>
        <div class="stat-title">Puntos de Datos</div>
        <div class="stat-value text-accent">{dayStats.dataPoints}</div>
        <div class="stat-desc">Últimas 24 horas</div>
      </div>
    </div>

    <!-- Main Charts Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
      <!-- Temperatura Trend -->
      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body">
          <div class="flex items-center justify-between mb-4">
            <h2 class="card-title">
              <svg class="w-5 h-5 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4"/>
              </svg>
              Tendencia de Temperatura
            </h2>
            <div class="dropdown dropdown-end">
              <div tabindex="0" role="button" class="btn btn-ghost btn-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"/>
                </svg>
              </div>
              <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                <li><a>Exportar PNG</a></li>
                <li><a>Exportar CSV</a></li>
                <li><a>Compartir</a></li>
              </ul>
            </div>
          </div>
          <AnalyticsChart 
            data={dayData} 
            type="line" 
            title=""
            timeRange="day"
            client:load 
          />
        </div>
      </div>

      <!-- Temperatura + Humedad -->
      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body">
          <div class="flex items-center justify-between mb-4">
            <h2 class="card-title">
              <svg class="w-5 h-5 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
              </svg>
              Temperatura vs Humedad
            </h2>
            <div class="badge badge-secondary badge-outline">Correlación</div>
          </div>
          <AnalyticsChart 
            data={dayData} 
            type="line" 
            title=""
            showHumidity={true}
            timeRange="day"
            client:load 
          />
        </div>
      </div>
    </div>

    <!-- Weekly Comparison -->
    <div class="card bg-base-100 shadow-lg border border-base-300 mb-8">
      <div class="card-body">
        <div class="flex items-center justify-between mb-4">
          <h2 class="card-title text-xl">
            <svg class="w-6 h-6 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 8v8m-4-5v5m-4-2v2m-2 4h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
            </svg>
            Análisis Semanal
          </h2>
          <div class="flex gap-2">
            <div class="badge badge-accent">7 días</div>
            <div class="badge badge-outline">{weekData.length} puntos</div>
          </div>
        </div>
        <div class="h-80">
          <AnalyticsChart 
            data={weekData} 
            type="bar" 
            title=""
            timeRange="week"
            client:load 
          />
        </div>
      </div>
    </div>

    <!-- Sensors Performance -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
      <!-- Sensor Status -->
      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body">
          <h2 class="card-title mb-6">
            <svg class="w-5 h-5 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            Estado de Sensores
          </h2>
          <div class="space-y-4">
            {sensorData.map((sensor, index) => (
              <div class="flex items-center justify-between p-4 bg-base-200 rounded-lg">
                <div class="flex items-center gap-4">
                  <div class={`w-4 h-4 rounded-full ${
                    sensor.status === 'normal' ? 'bg-success' :
                    sensor.status === 'warning' ? 'bg-warning' :
                    'bg-error'
                  }`}></div>
                  <div>
                    <div class="font-semibold">{sensor.name}</div>
                    <div class="text-sm text-base-content/60">{sensor.location}</div>
                  </div>
                </div>
                <div class="text-right">
                  <div class="font-bold">{sensor.avgTemp}°C</div>
                  <div class="text-sm text-base-content/60">{sensor.uptime}% uptime</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Performance Metrics -->
      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body">
          <h2 class="card-title mb-6">
            <svg class="w-5 h-5 text-info" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z"/>
            </svg>
            Métricas de Rendimiento
          </h2>
          
          <!-- Data Quality -->
          <div class="mb-6">
            <div class="flex justify-between text-sm mb-2">
              <span>Calidad de Datos</span>
              <span class="font-semibold">98.5%</span>
            </div>
            <progress class="progress progress-success w-full" value="98.5" max="100"></progress>
          </div>

          <!-- Network Uptime -->
          <div class="mb-6">
            <div class="flex justify-between text-sm mb-2">
              <span>Uptime de Red</span>
              <span class="font-semibold">99.2%</span>
            </div>
            <progress class="progress progress-info w-full" value="99.2" max="100"></progress>
          </div>

          <!-- Response Time -->
          <div class="mb-6">
            <div class="flex justify-between text-sm mb-2">
              <span>Tiempo de Respuesta</span>
              <span class="font-semibold">120ms</span>
            </div>
            <progress class="progress progress-warning w-full" value="75" max="100"></progress>
          </div>

          <!-- Alerts Generated -->
          <div class="stats stats-vertical bg-base-200 rounded-lg">
            <div class="stat">
              <div class="stat-title text-xs">Alertas (24h)</div>
              <div class="stat-value text-error text-2xl">3</div>
              <div class="stat-desc">2 críticas</div>
            </div>
            <div class="stat">
              <div class="stat-title text-xs">Eventos</div>
              <div class="stat-value text-info text-2xl">156</div>
              <div class="stat-desc">Registros totales</div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Export Actions -->
    <div class="card bg-gradient-to-r from-primary to-secondary text-primary-content shadow-lg">
      <div class="card-body">
        <div class="flex flex-col md:flex-row md:items-center justify-between gap-4">
          <div>
            <h3 class="card-title text-xl mb-2">Exportar Datos</h3>
            <p class="opacity-90">Genera reportes detallados de tus datos de sensores</p>
          </div>
          <div class="flex gap-2">
            <button class="btn btn-ghost text-primary-content">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
              CSV
            </button>
            <button class="btn btn-ghost text-primary-content">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
              </svg>
              PDF
            </button>
            <button class="btn btn-ghost text-primary-content">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"/>
              </svg>
              Compartir
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</AppLayout>

<script>
  // Tab functionality
  document.addEventListener('DOMContentLoaded', function() {
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => {
      tab.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Remove active class from all tabs
        tabs.forEach(t => t.classList.remove('tab-active'));
        
        // Add active class to clicked tab
        (e.currentTarget as HTMLElement).classList.add('tab-active');
        
        // Here you would typically update the charts based on the selected period
        const period = (e.currentTarget as HTMLElement).getAttribute('data-period');
        console.log('Selected period:', period);
      });
    });
  });
</script>
